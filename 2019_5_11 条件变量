  #include <stdio.h>                                                                                                                        
  #include <unistd.h>    
  #include <stdlib.h>    
  #include <errno.h>        
  #include <pthread.h>    
  int noodle=1;    
  pthread_cond_t boss;    
  pthread_cond_t customer;    
  pthread_mutex_t mutex;    
W>void *thr_boss(void *arg){    
    while(1){    
      pthread_mutex_lock(&mutex);     
      while(noodle==1){    
        //限时等待    
        pthread_cond_wait(&boss,&mutex);    
      }    
      printf("create noodle\n");    
      noodle+=1;    
      pthread_cond_signal(&customer);    
      pthread_mutex_unlock(&mutex);    
    }    
    return NULL;      
  }    
W>void *thr_customer(void *arg){    
    while(1){    
      pthread_mutex_lock(&mutex);    
      while(noodle==0){    
        pthread_cond_wait(&customer,&mutex);    
      }    
      printf("nice\n");    
      noodle-=1;    
      pthread_mutex_unlock(&mutex);    
      //唤醒老板
      pthread_cond_signal(&boss);
    }
    return NULL;
  }
  int main(){
    pthread_t tid1,tid2;
    pthread_cond_init(&boss,NULL);
    pthread_cond_init(&customer,NULL);
    pthread_mutex_init(&mutex,NULL);
    int ret;
    int i=0;
    for(i=0;i<2;i++){
  
      ret=pthread_create(&tid1,NULL,thr_boss,NULL);
      if(ret!=0){
        printf("boss error\n");
        return -1;
      }
    }
    for(i=0;i<2;i++){
      ret=pthread_create(&tid2,NULL,thr_customer,NULL);
      if(ret!=0){
        printf("customer error\n");
        return -1;
  
      }                                                                                                                                     
    }
    pthread_join(tid1,NULL);
    pthread_join(tid2,NULL);
    pthread_cond_destroy(&boss);
    pthread_cond_destroy(&customer);
    pthread_mutex_destroy(&mutex);
    return 0;
  }           
